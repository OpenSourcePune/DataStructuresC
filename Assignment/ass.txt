Kapil Pramod Deshmukh
189301161
CSE Section A (Second Year)

Data Structures Assignment â€“ 1

Solution 1 :

#include<stdio.h>

void main(){
	int TestCases,Sum,NumberOfElephants,Candies,k;
    scanf("%d",&TestCases);
	while(TestCases>0){
		scanf("%d %d",&NumberOfElephants,&Candies);
		Sum=0;
		while(NumberOfElephants>0){
			scanf("%d",&k);
			Sum=Sum+k+2;
			NumberOfElephants--;
		}
		if(Candies<Sum)
			printf("No!\n");
		else
			printf("Yes!\n");
		TestCases--;
	}
}

Solution 2 :

#include<stdio.h>

void sort(int arr[],int low,int mid,int high){
    int i,m,k,l,temp[100];
    l=low;
    i=low;
    m=mid+1;
    while((l<=mid)&&(m<=high)){
        if(arr[l]<=arr[m]){
            temp[i]=arr[l];
            l++;
        }
        else{
            temp[i]=arr[m];
            m++;
        }
        i++;
    }
    if(l>mid){
        for(k=m;k<=high;k++){
            temp[i]=arr[k];
            i++;
        }
    }
    else{
        for(k=l;k<=mid;k++){
            temp[i]=arr[k];
            i++;
        }
    }
    for(k=low;k<=high;k++){
        arr[k]=temp[k];
    }
}

void partition(int arr[],int low,int high){
    int mid;
    if(low<high){
        mid=(low+high)/2;
        partition(arr,low,mid);
        partition(arr,mid+1,high);
        sort(arr,low,mid,high);
    }
}

void main(){
    int t,n,i;
    printf("Enter Test Cases:\n");
    scanf("%d",&t);
    while(t--){
        printf("Enter Number of Workers:\n");
        scanf("%d",&n);
        int arr[n];
        for(i=0;i<n;i++)
        scanf("%d",&arr[i]);
        partition(arr,0,n-1);
        int s=0,sum=0,p=0;
        for(i=0;i<n-1;i++){
            p=s+(arr[i+1]-arr[i]);
            s=p;
            sum+=p;
        }
        printf("Number of Operations : %d\n",sum);




























 Solution 3 :

#include <stdio.h>

int main(void) {
int t,m,x,y,i,n=0,z=1,tot=0,j,min;
scanf("%d",&t);
while(t--)
{
	 scanf("%d %d %d",&m,&x,&y);
	    int a[m];
	    for(i=0;i<m;i++){
	        scanf("%d",&a[i]);
	    }

	    for(i=0;i<m;i++){
	        for(j=i+1;j<m;j++){
	            if(a[i]>a[j]){
	                min=a[j];
	                a[j]=a[i];
	                a[i]=min;
	            }
	        }
	    }

	    if(a[0]>x*y)
	     tot+=a[0]-x*y-1;

	    for(i=1;i<m;i++){
	      if(a[i]-a[i-1]>(2*x*y)){
	          tot+=a[i]-a[i-1]-(2*x*y)-1;
	      }

	    }
	    if(150>a[m-1]+(x*y)){
        tot+=+150-a[m-1]-(x*y);
      }
	    printf("%d\n",tot);
	    tot=0;
	}
	return 0;
}





















Solution 4 :
#include <stdio.h>
#include <stdlib.h>
void main(){
  int n, *a, i, j, temp;
  printf("Enter number of elements: ");
  scanf("%d", &n);
  a = (int *)malloc( sizeof(int)*n );
  printf("Input array elements: ");
  for(i=0; i<n; i++){
    scanf("%d", (a+i));
  }
  printf("\nArray in ascending order: ");
  for(i=0; i<n; i++){
    for(j=0; j<n-1; j++){
      if( (a+j)>(a+j+1) ){
        temp=*(a+j);
        *(a+j)=*(a+j+1);
        *(a+j+1)=temp;
      }
    }
  }
  for(i=0; i<n; i++){
    printf("%d ", *(a+i));
  }
  printf("\nArray in descending order: ");
  for(i=n-1; i>=0; i--){
    printf("%d ", *(a+i));
  }
}
Solution 5 :
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//I - Check empty, AF - Add element to first, AL- Add element to last
//RF - remove first RL - remove last PF - print first PL - prints last
// REV reverses LL

struct node{
  int data;
  struct node *ptr;
}*start=NULL,*t,*end,*npr;

void createLinkedList(int n){
  for(int i=0;i<n;i++){
    t = (struct node *)malloc(sizeof(struct node));
    printf("Enter data at node %d : ",(i+1));
    scanf("%d",&((*t).data));
    t->ptr = NULL;
    if(start==NULL){
      start = t;
    }else{
      end->ptr = t;
    }
    end = t;
    end->ptr=start;
  }
}

void displayLinkedList(struct node * start){
  for(t=start;t->ptr!=NULL;t=t->ptr){
    printf("%d ",t->data);
  }
  printf("%d",t->data);
}

void insertLinkedList(int pos, int ele){
  t = (struct node *)malloc(sizeof(struct node));
  (*t).data = ele;
  //t->ptr = NULL;
  if(pos==1){
    t->ptr = start;
    start = t;
  }else{
    npr = start;
    for(int i=2;i<pos;i++){
      npr = npr->ptr;
    }
    t->ptr = npr->ptr;
    npr->ptr = t;
  }
}

void deletionLinkedList(int pos){
  if(pos==1){
    t = start;
    start = start->ptr;
  }else{
    npr = NULL;
    t = start;
    for(int i=1;i<pos && t->ptr!=NULL;i++){
      npr = t;
      t = t->ptr;
    }
    npr->ptr = t->ptr;
  }
  free(t);
}

void main(){
  int n,x;
  printf("Enter number of elements in the linked list :");
  scanf("%d",&n);
  createLinkedList(n);
  char option[2];
  do{
    printf("Enter your operation :");
    scanf("%s",option);
    if(strcmp(option,"AF")==1){
      printf("Enter the value to be added at first node :");
      scanf("%d",&x);
      insertLinkedList(1,x);
      n++;
      x=NULL;
    }else if(strcmp(option,"AL")==1){
      printf("Enter the value to be added at last node :");
      scanf("%d",&x);
      insertLinkedList(n,x);
      n++;
      x=NULL;
    }else if(strcmp(option,"RF")==1){
      deletionLinkedList(1);
      n--;
      x=NULL;
    }else if(strcmp(option,"RL")==1){
      deletionLinkedList(n);
      n--;
      x=NULL;
    }else if(strcmp(option,"PF")==1){
      t = start->ptr;
      printf("%d",(*t).data);
      t = NULL;
    }else if(strcmp(option,"PL")==1){
      t = end;
      printf("%d",(*t).data);
      t = NULL;
    }
  }while(strcmp(option,"AL")!=1);
}














Solution 6.2 :

#include <stdio.h>
#include <stdlib.h>

struct node {
	int data;
	struct node* t;
};

void swap(int* a, int* b);

void swap_p(struct node* t1){
	struct node* temp = t1;

	while (temp != NULL && temp->t != NULL) {
		swap(&temp->data, &temp->t->data);
		temp = temp->t->t;
	}
}

void swap(int* a, int* b){
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}


void create(struct node** t1_ref, int new_data){

	struct node* new_node = (struct Node*)malloc(sizeof(struct node));
	new_node->data = new_data;
	new_node->t = (*t1_ref);
	(*t1_ref) = new_node;
}

void printLL(struct node* node){
	while (node != NULL) {
		printf("%d ", node->data);
		node = node->t;
	}
}

int main(){
	struct node* start = NULL;

	create(&start, 17);
	create(&start, 16);
	create(&start, 118);
	create(&start, 69);
	create(&start, 428);
  	create(&start, 74);
  	create(&start, 39);
  	create(&start, 5);

	printf("Linked list is...\n");
	printLL(start);

	swap_p(start);

	printf("\nLinked list after swap...\n");
	printLL(start);
}

Solution 6.5 :

#include <stdio.h>
void arraySort(int*, int, int);

int check(int A[], int arr_size, int sum){
	int l, r;
	arraySort(A, 0, arr_size - 1);
	l = 0;
	r = arr_size - 1;
	while (l < r) {
		if (A[l] + A[r] == sum)
			return 1;
		else if (A[l] + A[r] < sum)
			l++;
		else
			r--;
	}
	return 0;
}


void exchange(int* a, int* b){
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}

int partition(int A[], int si, int ei){
	int x = A[ei];
	int i = (si - 1);
	int j;
	for (j = si; j <= ei - 1; j++) {
		if (A[j] <= x) {
			i++;
			exchange(&A[i], &A[j]);
		}
	}
	exchange(&A[i + 1], &A[ei]);
	return (i + 1);
}


void arraySort(int A[], int si, int ei){
	int pi; /* Partitioning index */
	if (si < ei) {
		pi = partition(A, si, ei);
		arraySort(A, si, pi - 1);
		arraySort(A, pi + 1, ei);
	}
}


void main(){
  int n;
  printf("Enter elements: ");
  scanf("%d", &n);
	int arr[n], sum, i;

  printf("Enter array elements...\n");
  for(i=0; i<n; i++){
    scanf("%d", &arr[i]);
  }
  printf("Enter sum to check: ");
  scanf("%d", &sum);

	if (check(arr, n, sum))
		printf("Array has two elements with given sum");
	else
		printf("Array doesn't have two elements with given sum");
}

Solution 6.7 :

#include <stdio.h>
#include <stdlib.h>
//Part 7//
struct node{
  int data;
  struct node *ptr;
}*start=NULL,*t,*end,*npr,*tp,*tn;

void createLinkedList(int n){
  for(int i=0;i<n;i++){
    t = (struct node *)malloc(sizeof(struct node));
    printf("Enter data at node %d : ",(i+1));
    scanf("%d",&((*t).data));
    t->ptr = NULL;
    if(start==NULL){
      start = t;
    }else{
      end->ptr = t;
    }
    end = t;
  }
}

void displayLinkedList(struct node * start){
  for(t=start;t->ptr!=NULL;t=t->ptr){
    printf("%d ",t->data);
  }
  printf("%d ",t->data);
  printf("\n");
}

struct node * reverseLinkedList(struct node * start){

    if(start != NULL){
        tp = start;
        t = start->ptr;
        start = start->ptr;
        tp->ptr = NULL;
        while(start != NULL){
            start = start->ptr;
            t->ptr = tp;

            tp = t;
            t = start;
        }
        start = tp;
    }
}

void main(){
  int n;
  struct node *startrev;
  printf("Enter number of nodes in the linked list : ");
  scanf("%d",&n);
  createLinkedList(n);
  printf("Here's your original linked list : ");
  displayLinkedList(start);
  startrev = reverseLinkedList(start);
  printf("Your reversed Linked List -- ");
  displayLinkedList(startrev);
}
